package com.honeyedoak.ppksecuredws.processor;

import com.google.auto.service.AutoService;
import com.honeyedoak.ppksecuredws.annotation.SecureJsonConverter;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;
import java.io.IOException;
import java.util.Set;

@SupportedAnnotationTypes("com.honeyedoak.ppksecuredws.annotation.SecureJsonConverter")
@SupportedSourceVersion(SourceVersion.RELEASE_8)
@AutoService(Processor.class)
public class SecureJsonConverterProcessor extends AbstractProcessor {
	private Types typeUtils;
	private Elements elementUtils;
	private Filer filer;
	private Messager messager;

	@Override
	public synchronized void init(ProcessingEnvironment processingEnv) {
		super.init(processingEnv);
		typeUtils = processingEnv.getTypeUtils();
		elementUtils = processingEnv.getElementUtils();
		filer = processingEnv.getFiler();
		messager = processingEnv.getMessager();
	}

	@Override
	public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnv) {

		// Iterate over all @Factory annotated elements
		for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(SecureJsonConverter.class)) {
			// Check if a class has been annotated with @Factory
			if (annotatedElement.getKind() != ElementKind.CLASS) {
				error(annotatedElement, "Only class can be annotated with @%s",
						SecureJsonConverter.class.getSimpleName());
				return true; // Exit processing
			}

			TypeElement typeElement = (TypeElement) annotatedElement;
			try {
				SecureJsonConverterAnnotatedClass annotatedClass = new SecureJsonConverterAnnotatedClass(typeElement);

				if (!isValid(annotatedClass)) {
					return true; // Exit processing
				}


				annotatedClass.generateCode(filer);

			} catch (IllegalArgumentException e) {
				error(annotatedElement, e.getMessage());
				return true; // Exit processing
			} catch (IOException e) {
				error(annotatedElement, "Failed to write java class generated by annotation @%s",
						SecureJsonConverter.class.getSimpleName());
				return true; // Exit processing
			}
		}

		return true;
	}

	private boolean isValid(SecureJsonConverterAnnotatedClass annotatedClass) {
		throw new NotImplementedException();
	}

	private void error(Element e, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.ERROR,
				String.format(msg, args),
				e);
	}
}
